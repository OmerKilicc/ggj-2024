//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputsSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputsSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputsSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsSystem"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""5be640e5-12c3-4504-b423-9a93e9460a29"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5a7894b0-6d69-4282-b467-a750f39b5e99"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NextDialogLine"",
                    ""type"": ""Button"",
                    ""id"": ""dcbf0166-ad0f-4403-a9ba-ca7ca7a4fbc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a89e5867-6d53-4f37-a536-8c8639ebdef1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""0ed3c327-d345-4dc9-a443-949751d82b8f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c25de3f-b796-48d4-ae96-df2f971208f0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea1e2d0a-c890-4d27-be0c-3b78fdf6616b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd06881c-33e4-415b-b823-858547413266"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e7b4a492-c182-48d1-b575-786c9f44cc72"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""a8d24eb7-2aa6-4860-b99a-e9cd1791abcf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b2d9d205-85f9-4395-b215-fa28ae48ac48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffddaaac-c279-4d1d-8135-4012cf5b8513"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""65d6d4fd-3cd1-4431-a846-2c994c3a9875"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d682c156-9045-46d7-8c20-cb204d9b4572"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5806c4b3-598c-4979-b28f-7d47e84e08a0"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7143be68-a7a7-43d2-ac10-6697e254864b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialogLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b303934-c45e-4996-8927-272018e0def5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialogLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d6145e-b646-4260-82cf-a707e04ed3bc"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialogLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""898996ae-62d4-415e-b2a1-9bd19d0f1fb6"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialogLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1144341-15d2-4ff4-918b-47017a38ff7c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Jokes"",
            ""id"": ""a9343950-621e-4ec8-8e29-8d57d96a993d"",
            ""actions"": [
                {
                    ""name"": ""UseJoke"",
                    ""type"": ""Button"",
                    ""id"": ""f03bd5d7-7d4a-4c72-84a3-fb4ab97a5090"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToBaseJoke"",
                    ""type"": ""Button"",
                    ""id"": ""8661d5e0-9c8e-462f-b80d-5cce62dcf2d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToBigJoke1"",
                    ""type"": ""Button"",
                    ""id"": ""11e1e4cc-d6f5-478e-b2e8-d9af00f9e9ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToBigJoke2"",
                    ""type"": ""Button"",
                    ""id"": ""de9ae3b4-8263-480f-b1e9-f6a9c7c90cf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToBigJoke3"",
                    ""type"": ""Button"",
                    ""id"": ""b6bd316c-3fe3-4759-a3d3-5bc556fc4a98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a4f15fc-4fb1-475c-9e79-3281c4d3960f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseJoke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5bc6d36-4976-41f0-9122-0bb06902c238"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToBaseJoke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8f49707-559c-4742-9ed0-a4bd544fcea8"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToBigJoke1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dae78a6b-fc7f-47b2-a3a9-6ed676723444"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToBigJoke2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a2247d-df47-464c-bc2b-d4cad7db51f4"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToBigJoke3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_NextDialogLine = m_Character.FindAction("NextDialogLine", throwIfNotFound: true);
        m_Character_LookPosition = m_Character.FindAction("LookPosition", throwIfNotFound: true);
        // Jokes
        m_Jokes = asset.FindActionMap("Jokes", throwIfNotFound: true);
        m_Jokes_UseJoke = m_Jokes.FindAction("UseJoke", throwIfNotFound: true);
        m_Jokes_SwitchToBaseJoke = m_Jokes.FindAction("SwitchToBaseJoke", throwIfNotFound: true);
        m_Jokes_SwitchToBigJoke1 = m_Jokes.FindAction("SwitchToBigJoke1", throwIfNotFound: true);
        m_Jokes_SwitchToBigJoke2 = m_Jokes.FindAction("SwitchToBigJoke2", throwIfNotFound: true);
        m_Jokes_SwitchToBigJoke3 = m_Jokes.FindAction("SwitchToBigJoke3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_NextDialogLine;
    private readonly InputAction m_Character_LookPosition;
    public struct CharacterActions
    {
        private @InputsSystem m_Wrapper;
        public CharacterActions(@InputsSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        public InputAction @NextDialogLine => m_Wrapper.m_Character_NextDialogLine;
        public InputAction @LookPosition => m_Wrapper.m_Character_LookPosition;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @NextDialogLine.started += instance.OnNextDialogLine;
            @NextDialogLine.performed += instance.OnNextDialogLine;
            @NextDialogLine.canceled += instance.OnNextDialogLine;
            @LookPosition.started += instance.OnLookPosition;
            @LookPosition.performed += instance.OnLookPosition;
            @LookPosition.canceled += instance.OnLookPosition;
        }

        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @NextDialogLine.started -= instance.OnNextDialogLine;
            @NextDialogLine.performed -= instance.OnNextDialogLine;
            @NextDialogLine.canceled -= instance.OnNextDialogLine;
            @LookPosition.started -= instance.OnLookPosition;
            @LookPosition.performed -= instance.OnLookPosition;
            @LookPosition.canceled -= instance.OnLookPosition;
        }

        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    // Jokes
    private readonly InputActionMap m_Jokes;
    private List<IJokesActions> m_JokesActionsCallbackInterfaces = new List<IJokesActions>();
    private readonly InputAction m_Jokes_UseJoke;
    private readonly InputAction m_Jokes_SwitchToBaseJoke;
    private readonly InputAction m_Jokes_SwitchToBigJoke1;
    private readonly InputAction m_Jokes_SwitchToBigJoke2;
    private readonly InputAction m_Jokes_SwitchToBigJoke3;
    public struct JokesActions
    {
        private @InputsSystem m_Wrapper;
        public JokesActions(@InputsSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseJoke => m_Wrapper.m_Jokes_UseJoke;
        public InputAction @SwitchToBaseJoke => m_Wrapper.m_Jokes_SwitchToBaseJoke;
        public InputAction @SwitchToBigJoke1 => m_Wrapper.m_Jokes_SwitchToBigJoke1;
        public InputAction @SwitchToBigJoke2 => m_Wrapper.m_Jokes_SwitchToBigJoke2;
        public InputAction @SwitchToBigJoke3 => m_Wrapper.m_Jokes_SwitchToBigJoke3;
        public InputActionMap Get() { return m_Wrapper.m_Jokes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JokesActions set) { return set.Get(); }
        public void AddCallbacks(IJokesActions instance)
        {
            if (instance == null || m_Wrapper.m_JokesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JokesActionsCallbackInterfaces.Add(instance);
            @UseJoke.started += instance.OnUseJoke;
            @UseJoke.performed += instance.OnUseJoke;
            @UseJoke.canceled += instance.OnUseJoke;
            @SwitchToBaseJoke.started += instance.OnSwitchToBaseJoke;
            @SwitchToBaseJoke.performed += instance.OnSwitchToBaseJoke;
            @SwitchToBaseJoke.canceled += instance.OnSwitchToBaseJoke;
            @SwitchToBigJoke1.started += instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke1.performed += instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke1.canceled += instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke2.started += instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke2.performed += instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke2.canceled += instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke3.started += instance.OnSwitchToBigJoke3;
            @SwitchToBigJoke3.performed += instance.OnSwitchToBigJoke3;
            @SwitchToBigJoke3.canceled += instance.OnSwitchToBigJoke3;
        }

        private void UnregisterCallbacks(IJokesActions instance)
        {
            @UseJoke.started -= instance.OnUseJoke;
            @UseJoke.performed -= instance.OnUseJoke;
            @UseJoke.canceled -= instance.OnUseJoke;
            @SwitchToBaseJoke.started -= instance.OnSwitchToBaseJoke;
            @SwitchToBaseJoke.performed -= instance.OnSwitchToBaseJoke;
            @SwitchToBaseJoke.canceled -= instance.OnSwitchToBaseJoke;
            @SwitchToBigJoke1.started -= instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke1.performed -= instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke1.canceled -= instance.OnSwitchToBigJoke1;
            @SwitchToBigJoke2.started -= instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke2.performed -= instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke2.canceled -= instance.OnSwitchToBigJoke2;
            @SwitchToBigJoke3.started -= instance.OnSwitchToBigJoke3;
            @SwitchToBigJoke3.performed -= instance.OnSwitchToBigJoke3;
            @SwitchToBigJoke3.canceled -= instance.OnSwitchToBigJoke3;
        }

        public void RemoveCallbacks(IJokesActions instance)
        {
            if (m_Wrapper.m_JokesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJokesActions instance)
        {
            foreach (var item in m_Wrapper.m_JokesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JokesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JokesActions @Jokes => new JokesActions(this);
    public interface ICharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnNextDialogLine(InputAction.CallbackContext context);
        void OnLookPosition(InputAction.CallbackContext context);
    }
    public interface IJokesActions
    {
        void OnUseJoke(InputAction.CallbackContext context);
        void OnSwitchToBaseJoke(InputAction.CallbackContext context);
        void OnSwitchToBigJoke1(InputAction.CallbackContext context);
        void OnSwitchToBigJoke2(InputAction.CallbackContext context);
        void OnSwitchToBigJoke3(InputAction.CallbackContext context);
    }
}
